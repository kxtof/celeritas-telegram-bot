from celeritas.user_settings import User_settings
from solders.keypair import Keypair
from base58 import b58encode
import json


class User:
    """
    ``positions`` 
        A list with all tokens currently owned by user, will always have the amount of tokens owned. 
        If the token was acquired with the bot there will also be additional information calculated with transactions.
            sure information: balance
            additional: avg entry, buys and sells (number and sol/usd value), pnl usd/sol
        Positions are calculated on the fly, based on the users holdings and previous transactions.
    ``transactions``
        Sequence (list) with all transactions confirmed through RPC Webhook.
        Each transaction contains:
            timestamp,
            mint,
            sol/token balance before and after
            sol_dollar_value at that moment
            fee to bot, useful for revenue calculations
            {"timestamp": int, "mint": str, "pre_sol_balance": float, "post_sol_balance": float, "pre_token_balance": float, "post_token_balance": float, "sol_dollar_value": float, "fee_paid": str}
    ``sniping``
        A list with all current sniping setups
        Each element contains:
            wallet
            amount - how manyy tokens to snipe
            slippage
            priority fee
            {"wallet": str, "amount": float, "slippage": float, "priority_fee": float}

    """
    def __init__(
        self,
        id=None,
        name=None,                 # @username if available, else full_name
        full_name=None,            # first_name, followe by last_name if available
        wallet_public=None,        # Main wallet public key
        wallet_secret=None,        # Secret of main wallet
        referral_wallet=None,      # Wallet to which rewards are sent
        referrer=None,             # Referrer, can be set by user? edit: likely not
        referral_share=[0.3, 0.035, 0.025, 0.02, 0.01],
        users_referred=0,          # Number of users the user has referred
        trading_fees_earned=0,     # Total trading fees earned by the user
        trading_fees_paid_out=0,   # Total trading fees paid out to the user
        sol_in_wallet=0,           # Amount of sol in wallet
        holdings={},               # All tokens
        transactions=[],           # What token, how much, when, for how much sol
        positions={},              # Created when the user buys token with bot, tracked in the positions page
        ct=None,                   # Copy trade
        dca=None,                  # Dollar cost averaging
        sniping=[],                # Wallets to follow for pump.fun sniping, of format {followed_wallet: {amount: float, slippage: float, persistence: bool (if the wallet will be removed after snipe)}}
        revenue=0,                 # Lifetime revenue generated by user (fees going to the bot)
        settings=User_settings(),  # Default user settings
    ):
        self.id = id
        self.name = name
        self.full_name = full_name
        self.wallet_public = wallet_public
        self.wallet_secret = wallet_secret
        self.referral_wallet = referral_wallet if referral_wallet else wallet_public
        self.referrer = referrer
        self.referral_share = referral_share
        self.users_referred = users_referred
        self.trading_fees_earned = trading_fees_earned
        self.trading_fees_paid_out = trading_fees_paid_out
        self.sol_in_wallet = sol_in_wallet
        self.holdings = holdings
        self.transactions = transactions
        self.positions = positions
        self.ct = ct
        self.dca = dca
        self.sniping = sniping
        self.revenue = revenue
        self.settings = settings

        if not wallet_secret:
            k = Keypair()
            self.wallet_public = b58encode(bytes(k.pubkey())).decode()
            self.wallet_secret = b58encode(bytes(k)).decode()
            self.referral_wallet = (
                self.wallet_public if not self.referral_wallet else self.referral_wallet
            )

    def to_dict(self):
        user_dict = {
            "_id": self.id,
            "name": self.name,
            "full_name": self.full_name,
            "wallet_public": self.wallet_public,
            "wallet_secret": self.wallet_secret,
            "referral_wallet": self.referral_wallet,
            "referrer": self.referrer,
            "referral_share": self.referral_share,
            "users_referred": self.users_referred,
            "trading_fees_earned": self.trading_fees_earned,
            "trading_fees_paid_out": self.trading_fees_paid_out,
            "sol_in_wallet": self.sol_in_wallet,
            "holdings": self.holdings,
            "transactions": self.transactions,
            "positions": self.positions,
            "ct": self.ct,
            "dca": self.dca,
            "sniping": self.sniping,
            "revenue": self.revenue,
            "settings": self.settings.to_dict(),
        }
        return user_dict

    def to_json(self):
        return json.dumps(self.to_dict())

    @classmethod
    def from_dict(cls, data):
        return cls(
            id=data.get("_id"),
            name=data.get("name"),
            full_name=data.get("full_name"),
            wallet_public=data.get("wallet_public"),
            wallet_secret=data.get("wallet_secret"),
            referral_wallet=data.get("referral_wallet"),
            referrer=data.get("referrer"),
            referral_share=data.get("referral_share", [0.3, 0.035, 0.025, 0.02, 0.01]),
            users_referred=data.get("users_referred", 0),
            trading_fees_earned=data.get("trading_fees_earned", 0),
            trading_fees_paid_out=data.get("trading_fees_paid_out", 0),
            sol_in_wallet=data.get("sol_in_wallet", 0),
            holdings=data.get("holdings", {}),
            transactions=data.get("transactions", []),
            positions=data.get("positions", {}),
            ct=data.get("ct"),
            dca=data.get("dca"),
            sniping=data.get("sniping"),
            revenue=data.get("revenue", 0),
            settings=User_settings.from_dict(data.get("settings")),
        )

    @classmethod
    def from_json(cls, json_str):
        data = json.loads(json_str)
        return cls.from_dict(data)